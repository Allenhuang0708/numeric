/**
     * Pretty prints the expression x.
     * 
     * @example
> numeric.prettyPrint(1)
"1"
> numeric.prettyPrint([1,2])
"[1,2]"
> numeric.prettyPrint({x:1})
"{x:1}"
     */
function prettyPrint(x) {
    var ret = [], stops = [], names = [];
    function mksvg(s,fig) {
        var i,n,x,y,x0 = fig.x0,
            dx = (fig.width-fig.marginLeft-fig.marginRight)/(fig.x1 - fig.x0),
            y1 = fig.y1,
            dy=-(fig.height-fig.marginTop-fig.marginBottom)/(fig.y1-fig.y0);
        switch(s.type) {
        case "plot":
            ret.push('<polyline points="');
            x = s.x.x;
            y = s.y.x;
            n = y.length;
            for(i=0;i<n;i++) {
                ret.push(((x[i]-x0)*dx+fig.marginLeft) + "," + ((y[i]-y1)*dy+fig.marginTop)+" ");
            }
            ret.push('" style="fill:none;stroke:'+s.color+';stroke-width:'+s.lineWidth.x[0]+';" />');
            break;
        case "points":
            x = s.x.x;
            y = s.y.x;
            n = y.length;
            for(i=0;i<n;i++) {
                ret.push('<circle cx="'+((x[i]-x0)*dx+fig.marginLeft)
                         +'" cy="'+((y[i]-y1)*dy+fig.marginTop)
                         +'" r="'+s.radius.x[0]
                         +'" fill="'+s.fill+'" stroke="none" />');
            }
            break;
        default:
            throw new Error("prettyPrint: unknown plot type '"+s.type+"'");
        }
    }
    function mkticks(fig) {
        var i,x0 = fig.x0,
            dx = (fig.width-fig.marginLeft-fig.marginRight)/(fig.x1 - fig.x0),
            y0 = fig.y0,
            dy=-(fig.height-fig.marginTop-fig.marginBottom)/(fig.y1-fig.y0),
            y1 = fig.y1;
        var x = fig.xticks, y= fig.yticks, foo;
        for(i=0;i<x.length;i++) {
            foo = ((x[i]-x0)*dx+fig.marginLeft);
            ret.push('<text text-anchor="middle" x="'+foo +
                     '" y="' + (fig.height-fig.marginBottom+20)+'">'+fmtnum(x[i])+'</text>');
            ret.push('<polyline points="'+foo+','+(fig.marginTop)+' '
                          +foo+','+(fig.height-fig.marginBottom)
                +'" style="fill:none;stroke:#d0d0d0;stroke-width:1;" />');
        }
        for(i=0;i<y.length;i++) {
            foo = ((y[i]-y1)*dy+fig.marginTop);
            ret.push('<text text-anchor="end" x="'+((x0-x0)*dx+fig.marginLeft-10) +
                     '" y="' + foo +'">'+fmtnum(y[i])+'</text>');
            ret.push('<polyline points="'+(fig.marginLeft)+','+foo+' '
                    +(fig.width - fig.marginRight)+','+foo
          +'" style="fill:none;stroke:#d0d0d0;stroke-width:1;" />');
        }
    }
    function f(name,x,depth) {
            var y,foo;
            if(x === null) { ret.push("null"); }
            else if(typeof(x) === "number") { ret.push(fmtnum(x)); }
            else if(typeof(x) === "boolean")
            { ret.push(x.toString()); }
            else if(typeof(x) === "string") {
                    ret.push('"'+x.replace(/"/g,"\"")+'"');
            }
            else if(typeof(x) === "object" || (typeof(x) === "function" && isT(x))) {
                    if(typeof x.nodeType !== "undefined" && x.nodeType>0) { ret.push('"DOM object"'); return; }
                    y = stops.indexOf(x);
                    if(y>=0) { ret.push(names[y]); return; }
                    stops.push(x);
                    names.push(name);
                    if(isT(x)) {
                        if(x.s.length === 0) {
                            if(typeof x.y === "undefined") {
                                ret.push("t("+fmtnum(x.x[0])+")");
                            } else {
                                ret.push("t("+fmtnum(x.x[0])+","+fmtnum(x.y[0])+")");
                            }
                        } else {
                            if(x.s.length>1) { ret.push("\n"); }
                            ret.push("t(");
                            var f0 = function(z) {
                                var c=0;
                                function f(i) {
                                    if(i === x.s.length) { ret.push(fmtnum(z[c])); c++; return; }
                                    var j,k;
                                    ret.push(" [");
                                    for(j=0;j<x.s[i];j++) {
                                        if(j>0) {
                                            ret.push(", ");
                                            if(x.s.length>1 && i<x.s.length-1) {
                                                ret.push("\n");
                                                for(k=0;k<i+2;k++) { ret.push("  "); }
                                            }
                                        }
                                        f(i+1);
                                    }
                                    ret.push(" ]");
                                }
                                f(0);
                            };
                            f0(x.x);
                            if(typeof x.y !== "undefined") {
                                ret.push(",");
                                if(x.s.length>1) { ret.push("\n  "); }
                                f0(x.y);
                            }
                            ret.push(")");
                        }
                        
                    } else if (x instanceof P) {
                        x.findBoundingBox();
                        ret.push('<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="'+x.width+'" height="'+x.height+'">');
                        mkticks(x);
                        for(y=0;y<x.v.length;y++) { mksvg(x.v[y],x); }
                        ret.push('</svg>');
                    }else if(x instanceof Array) {
                        ret.push("\n");
                        for(y=0;y<depth;y++) { ret.push("  "); }
                        ret.push("[ ");
                        for(y=0;y<x.length;y++) {
                                if(y>0) { ret.push(", "); }
                                f(name+"["+y+"]",x[y],depth+1);
                        }
                        ret.push(" ]");
                        return;
                    } else {
                        ret.push('{');
                        foo = false;
                        for(y in x) {
                                if(x.hasOwnProperty(y)) {
                                        if(foo) { ret.push(","); }
                                        foo = true;
                                        ret.push(escape(y)+': ');
                                        f(name+"."+y,x[y],depth);
                                }
                        }
                        ret.push('}');
                    }
            }
            else if(typeof x === "function") { ret.push(x.toString().replace(/&/g,'&amp;').replace(/>/g,'&gt;').replace(/</g,'&lt;').replace(/"/g,'&quot;')); }
    }
    f("ans",x,0);
    return ret.join("");
}
my.prettyPrint = prettyPrint; 

/**
 * Plots
 * 
 * @example
> x = numeric.run(0,0.05,6.28); foo = numeric.plot({x:x, y:numeric.sin(x)},{x:x, y:numeric.cos(x),lineWidth:3,color:"red"})
<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="600" height="400"><text text-anchor="middle" x="150" y="390">0         </text><polyline points="150,10 150,370" style="fill:none;stroke:#d0d0d0;stroke-width:1;" /><text text-anchor="middle" x="233.8656000000002" y="390">1.248     </text><polyline points="233.8656000000002,10 233.8656000000002,370" style="fill:none;stroke:#d0d0d0;stroke-width:1;" /><text text-anchor="middle" x="317.7312000000004" y="390">2.496     </text><polyline points="317.7312000000004,10 317.7312000000004,370" style="fill:none;stroke:#d0d0d0;stroke-width:1;" /><text text-anchor="middle" x="401.5968000000006" y="390">3.744     </text><polyline points="401.5968000000006,10 401.5968000000006,370" style="fill:none;stroke:#d0d0d0;stroke-width:1;" /><text text-anchor="middle" x="485.46240000000086" y="390">4.992     </text><polyline points="485.46240000000086,10 485.46240000000086,370" style="fill:none;stroke:#d0d0d0;stroke-width:1;" /><text text-anchor="middle" x="569.328000000001" y="390">6.24      </text><polyline points="569.328000000001,10 569.328000000001,370" style="fill:none;stroke:#d0d0d0;stroke-width:1;" /><text text-anchor="end" x="140" y="368.2063297796347">-0.99     </text><polyline points="150,368.2063297796347 570,368.2063297796347" style="fill:none;stroke:#d0d0d0;stroke-width:1;" /><text text-anchor="end" x="140" y="278.654747334726">-0.4925   </text><polyline points="150,278.654747334726 570,278.654747334726" style="fill:none;stroke:#d0d0d0;stroke-width:1;" /><text text-anchor="end" x="140" y="189.10316488981735">0.005000  </text><polyline points="150,189.10316488981735 570,189.10316488981735" style="fill:none;stroke:#d0d0d0;stroke-width:1;" /><text text-anchor="end" x="140" y="99.55158244490868">0.5025    </text><polyline points="150,99.55158244490868 570,99.55158244490868" style="fill:none;stroke:#d0d0d0;stroke-width:1;" /><text text-anchor="end" x="140" y="10">1         </text><polyline points="150,10 570,10" style="fill:none;stroke:#d0d0d0;stroke-width:1;" /><polyline points="150,190.00318079378627 153.36,181.00677135163312 156.72000000000003,172.03284824784586 160.08,163.1038416166552 163.44000000000003,154.24206932450232 166.80000000000004,145.46968118699584 170.16000000000005,136.80860360590808 173.52000000000004,128.28048476458974 176.88000000000005,119.90664051878571 180.24000000000007,111.70800111809669 183.60000000000008,103.70505889125556 186.9600000000001,95.91781702597768 190.3200000000001,88.36573957140907 193.68000000000012,81.06770278814025 197.0400000000001,74.0419479673853 200.40000000000012,67.30603583725375 203.76000000000013,60.87680267007567 207.12000000000015,54.77031820048914 210.48000000000016,49.00184545947248 213.84000000000017,43.58580262471567 217.20000000000016,38.53572698268508 220.56000000000017,33.86424109245716 223.9200000000002,29.583021235894712 227.2800000000002,25.70276823302294 230.6400000000002,22.233180695552292 234.00000000000023,19.182930785400224 237.36000000000024,16.559642538802635 240.72000000000025,14.369872810193922 244.08000000000027,12.619094883485594 247.44000000000028,11.311684791706883 250.8000000000003,10.450910379201245 254.1600000000003,10.038923133717264 257.5200000000003,10.076752808809877 260.88000000000034,10.564304849992634 264.24000000000035,11.500360631074798 267.60000000000036,12.88258050009207 270.9600000000004,14.707509627218112 274.3200000000004,16.970586640039812 277.6800000000004,19.666155024612863 281.0400000000004,22.787477263800696 284.4000000000004,26.326751677558505 287.76000000000033,30.275131923070425 291.12000000000035,34.622749105999354 294.48000000000036,39.35873644758321 297.8400000000004,44.47125644592256 301.2000000000004,49.94753046357053 304.56000000000034,55.77387066747134 307.92000000000036,61.93571424141457 311.2800000000003,68.41765978549148 314.6400000000003,75.20350581157385 318.00000000000034,82.27629123859676 321.36000000000035,89.61833778642809 324.72000000000037,97.21129416236222 328.0800000000003,105.03618192979452 331.4400000000003,113.0734429444292 334.8000000000003,121.3029882394543 338.1600000000003,129.70424823749656 341.5200000000003,138.25622416385255 344.88000000000034,146.93754053248932 348.2400000000003,155.72649857362745 351.6000000000003,164.60113046936496 354.96000000000026,173.53925426178142 358.3200000000003,182.51852929628072 361.6800000000003,191.51651206159264 365.0400000000003,200.51071228686277 368.4000000000003,209.47864915561678 371.7600000000003,218.39790749609406 375.12000000000023,227.24619380750337 378.48000000000025,236.00139198216468 381.84000000000026,244.6416185842603 385.2000000000003,253.14527754702806 388.5600000000003,261.491114151681 391.92000000000024,269.6582681531352 395.28000000000026,277.6263259197587 398.6400000000002,285.375371456819 402.0000000000002,292.88603618609847 405.36000000000024,300.1395473572525 408.72000000000025,307.1177749699088 412.0800000000002,313.8032770892263 415.4400000000002,320.17934344164905 418.80000000000024,326.23003718188716 422.1600000000002,331.9402347267303 425.5200000000002,337.2956635561298 428.8800000000002,342.28293788706566 432.2400000000002,346.88959213103266 435.6000000000002,351.1041120515202 438.9600000000002,354.91596354360644 442.32000000000016,358.3156189637352 445.6800000000002,361.29458094386234 449.0400000000002,363.8454036304511 452.4000000000002,365.9617112952276 455.76000000000016,367.63821427118177 459.1200000000002,368.8707221739795 462.4800000000002,369.6561543757416 465.84000000000015,369.9925477050088 469.20000000000016,369.87906135364824 472.5600000000002,369.3159789784356 475.92000000000013,368.3047079920615 479.28000000000014,366.84777604533195 482.64000000000016,364.94882470935846 486.0000000000001,362.61260037352605 489.3600000000001,359.84494238199227 492.72000000000014,356.65276843836756 496.08000000000015,353.0440573150589 499.4400000000001,349.0278289104941 502.8000000000001,344.61412170407334 506.16000000000014,339.8139676651983 509.5200000000001,334.63936467909434 512.8800000000001,329.1032465583455 516.2400000000001,323.2194507150992 519.6000000000001,317.0026835747418 522.96,310.46848381749453 526.3200000000002,303.63318353980503 529.6800000000001,296.5138674326119 533.0400000000001,289.128330078515 536.4000000000001,281.49503147458614 539.76,273.63305089198997 543.1200000000001,265.5620391877427 546.48,257.30216968780326 549.8400000000001,248.87408776426474 553.2,240.2988592326757 556.5600000000001,231.5979176984724 559.9200000000001,222.79301098412756 563.28,213.90614677092037 566.6400000000001,204.95953759119436 570,195.9755453085949 " style="fill:none;stroke:black;stroke-width:1;" /><polyline points="150,10 153.36,10.22495710407004 156.72000000000003,10.899266140675394 160.08,12.021241688397923 163.44000000000003,13.588079392681848 166.80000000000004,15.595862975259802 170.16000000000005,18.039574022808786 173.52000000000004,20.913104530370056 176.88000000000005,24.20927216818045 180.24000000000007,27.9198382337564 183.60000000000008,32.03552824435937 186.9600000000001,36.54605511837282 190.3200000000001,41.44014488764868 193.68000000000012,46.70556487655644 197.0400000000001,52.32915427730157 200.40000000000012,58.29685704509093 203.76000000000013,64.59375703092458 207.12000000000015,71.20411526420004 210.48000000000016,78.11140929194214 213.84000000000017,85.29837447633074 217.20000000000016,92.74704714730395 220.56000000000017,100.43880950237809 223.9200000000002,108.3544361414579 227.2800000000002,116.47414212032427 230.6400000000002,124.77763240269125 234.00000000000023,133.244152587227 237.36000000000024,141.8525407827487 240.72000000000025,150.58128050192943 244.08000000000027,159.408554441311 247.44000000000028,168.31229901320037 250.8000000000003,177.27025949314833 254.1600000000003,186.2600456451707 257.5200000000003,195.2591876856775 260.88000000000034,204.24519244623 264.24000000000035,213.19559959474773 267.60000000000036,222.08803777464124 270.9600000000004,230.90028052155313 274.3200000000004,239.6103018179434 277.6800000000004,248.19633114666252 281.0400000000004,256.63690790590624 284.4000000000004,264.9109350495439 287.76000000000033,272.99773181874644 291.12000000000035,280.8770854331132 294.48000000000036,288.52930161209633 297.8400000000004,295.9352538004455 301.2000000000004,303.0764309746352 304.56000000000034,309.93498391078305 307.92000000000036,316.49376979841406 311.2800000000003,322.7363950885588 314.6400000000003,328.64725646908835 318.00000000000034,334.2115798648685 321.36000000000035,339.4154573652533 324.72000000000037,344.2458819866189 328.0800000000003,348.69078018304833 331.4400000000003,352.73904202390884 334.8000000000003,356.3805489628922 338.1600000000003,359.6061991291111 341.5200000000003,362.4079300770362 344.88000000000034,364.7787389384109 348.2400000000003,366.71269992577515 351.6000000000003,368.20497914384805 354.96000000000026,369.25184667174824 358.3200000000003,369.8506858858542 361.6800000000003,370 365.0400000000003,369.6994158066616 368.4000000000003,368.9496846097811 371.7600000000003,367.7526803468983 375.12000000000023,366.1113949052825 378.48000000000025,364.02993064377296 381.84000000000026,361.5134901390178 385.2000000000003,358.5683631817419 388.5600000000003,355.20191105554613 391.92000000000024,351.4225481375316 395.28000000000026,347.23972086673905 398.6400000000002,342.6638841329712 402.0000000000002,337.70647514501286 405.36000000000024,332.3798848435651 408.72000000000025,326.6974269303469 412.0800000000002,320.6733045907747 415.4400000000002,314.3225749933948 418.80000000000024,307.661111654805 422.1600000000002,300.7055647641283 425.5200000000002,293.473319566213 428.8800000000002,285.98245290757313 432.2400000000002,278.2516880536875 435.6000000000002,270.3003478905862 438.9600000000002,262.1483066276991 442.32000000000016,253.8159401226825 445.6800000000002,245.32407495238627 449.0400000000002,236.69393635725828 452.4000000000002,227.94709518929702 455.76000000000016,219.10541399615565 459.1200000000002,210.19099237615836 462.4800000000002,201.2261117408142 465.84000000000015,192.23317962289192 469.20000000000016,183.23467366925783 472.5600000000002,174.25308545846468 475.92000000000013,165.31086428351875 479.28000000000014,156.43036104033865 482.64000000000016,147.6337723621556 486.0000000000001,138.9430851394903 489.3600000000001,130.380021564377 492.72000000000014,121.9659848361961 496.08000000000015,113.72200566482249 499.4400000000001,105.66868970480326 502.8000000000001,97.82616605195255 506.16000000000014,90.21403693109515 509.5200000000001,82.85132870071297 512.8800000000001,75.75644429695765 516.2400000000001,68.94711723589421 519.6000000000001,62.44036728894635 522.96,56.252457942331546 526.3200000000002,50.39885574681545 529.6800000000001,44.894191659389755 533.0400000000001,39.75222447349941 536.4000000000001,34.98580642922437 539.76,30.606851089372796 543.1200000000001,26.626303561778467 546.48,23.054113142231294 549.8400000000001,19.899208446419344 553.2,17.169475093039516 556.5600000000001,14.871735993857627 559.9200000000001,13.011734299982248 563.28,11.594119046977907 566.6400000000001,10.622433534697372 570,10.09910647087728 " style="fill:none;stroke:red;stroke-width:3;" /></svg>
 */
function plot() {
var ret;
var color = ["black","blue","red","green","orange","purple","brown","yellow"];
if(this.__proto__ !== P.prototype) { ret = new P; } 
else { ret = this; }
var n = arguments.length, i, z, type, w;
for(i=0;i<n;i++) {
    z = arguments[i];
    if(typeof z.type === "undefined") { type = "plot"; }
    else { type = z.type; }
    switch(type) {
    case "plot":
        w = process(z,[["x",function(r,z) { return R(V(t(z))); },
                            function(r) { return run(r.y.x.length); }],
                       ["y",function(r,z) { return R(V(t(z))); },
                            function(r) { throw new Error("plot: field y is required.");}],
                       ["lineWidth",
                            function(r,z) { return R(S(t(z))); },
                            t(1)],
                       ["color",
                            function(r,z) { return z; },
                            function(r,z) { return color[ret.v.length%color.length]; }]]);
        break;
    case "points":
        w = process(z,[["x",function(r,z) { return R(V(t(z))); },
                        function(r) { return run(r.y.x.length); }],
                       ["y",function(r,z) { return R(V(t(z))); },
                             function(r) { throw new Error("plot: field y is required.");}],
                       ["radius",
                            function(r,z) { return R(V(t(z))); },
                            t(5)],
                       ["fill",
                            function(r,z) { return z; },
                            function(r,z) { return color[ret.v.length%color.length]; }]]);
        break;
    default:
        throw new Error("Unknown plot type "+type);
    }
    w.type = type;
    ret.v.push(w);
}
return ret;
}
my.plot = plot;

function R(z) { if(typeof z.y==="undefined") { return z; } throw new Error("tensor must be real"); }
function P() {
    this.v = []; 
    this.axis = "auto"; 
    this.x0 = 0; 
    this.x1 = 1; 
    this.y0 = 0; 
    this.y1 = 1;
    this.width = 600;
    this.height = 400;
    this.marginLeft = 150;
    this.marginRight = 30;
    this.marginTop = 10;
    this.marginBottom = 30;
    this.xticks = [0,1,2,3,4,5];
    this.yticks = [0,1,2,3,4];
}
function process(z,r) {
    var i,n = r.length, k, r0 = [], check = [],foo, ret = {};
    for(i=0;i<n;i++) { r0.push(r[i][0]); check.push(false); }
    for(k in z) {
        if(z.hasOwnProperty(k) && k!=="type") {
            foo = r0.indexOf(k);
            if(foo<0) { throw new Error("plot: unrecognized field "+k); }
            check[foo] = true;
            ret[k] = r[foo][1](ret,z[k]);
        }
    }
    for(i=0;i<n;i++) {
        if(check[i] === false) { 
            if(typeof r[i][2] === "function" && !isT(r[i][2])) { ret[r[i][0]] = r[i][2](ret); }
            else { ret[r[i][0]] = r[i][2]; }
        }
    }
    return ret;
}

P.prototype = { plot:plot,
findBoundingBox: function () {
    function mkticks(z0,z1,n) {
        var dz = z1-z0, zmax = Math.max(Math.abs(z0),Math.abs(z1)),
            zmin = Math.min(Math.abs(z0),Math.abs(z1));
        var log10 = function(z) { return Math.log(z)/Math.log(10); }
        var d0 = Math.floor(log10(Math.abs(dz))-2);
        var d = Math.pow(10,d0);
        z0 = Math.ceil(z0/d)*d;
        z1 = Math.floor(z1/d)*d;
        var ret = [];
        for(i=0;i<n;i++) { ret[i] = (i/(n-1))*(z1-z0)+z0; }
        return ret;
    }
    var i,j,m,n = this.v.length,x,y,x0=+Infinity,x1=-Infinity,y0=+Infinity,y1=-Infinity;
    for(i=0;i<n;i++) {
        switch(this.v[i].type) {
        case "plot":
        case "points":
            x = this.v[i].x.x;
            y = this.v[i].y.x;
            m = y.length;
            for(j=0;j<m;j++) {
                x0 = Math.min(x0,x[j]);
                x1 = Math.max(x1,x[j]);
                y0 = Math.min(y0,y[j]);
                y1 = Math.max(y1,y[j]);
            }
            break;
        }
    }
    this.x0 = x0;
    this.x1 = x1;
    this.y0 = y0;
    this.y1 = y1;
    this.xticks = mkticks(x0,x1,this.xticks.length);
    this.yticks = mkticks(y0,y1,this.yticks.length);
}
};
