Link testing.
Using Firefox
0 PASS: linkhome ==> library for numerical computations in page
1 PASS: linkworkshop ==> IN in page
2 PASS: linkdoc ==> vectors and matrices in page
3 PASS: linklib ==> use strict in page
4 PASS: linklibmin ==> var numeric={};numeric in page
Link testing complete. PASS: 5 FAIL: 0 Total: 5
Fetching http://numericjs.com/staging/documentation.html
In-browser unit tests.
Using Chrome
0 PASS: numeric.seedrandom.seedrandom('1'); Math.random = numeric.seedrandom.random; Math.random(); ==> 0.2694
1 PASS: A = [[1,2,3],[4,5,6]]; ==> [[1,2,3],[4,5,6]]
2 PASS: x = [7,8,9] ==> [7,8,9]
3 PASS: numeric.dot(A,x); ==> [50,122]
4 PASS: y = [10,1,2]; ==> [10,1,2]
5 PASS: numeric['+'](x,y) ==> [17,9,11]
6 PASS: numeric['>'](x,y) ==> [false,true,true]
7 PASS: numeric.add(x,y) ==> [17,9,11]
8 PASS: A = [[1,2,3],[4,5,6],[7,1,9]] ==> [[1,2,3],[4,5,6],[7,1,9]]
9 PASS: Ainv = numeric.inv(A); ==> [[-0.9286,0.3571,0.07143],[-0.1429,0.2857,-0.1429],[0.7381,-0.3095,0.07143]]
10 PASS: numeric.exp([1,2]); ==> [2.718,7.389]
11 PASS: numeric.exp([[1,2],[3,4]]) ==> [[2.718,7.389],[20.09,54.60]]
12 PASS: numeric.abs([-2,3]) ==> [2,3]
13 PASS: numeric.acos([0.1,0.2]) ==> [1.471,1.369]
14 PASS: numeric.asin([0.1,0.2]) ==> [0.1002,0.2014]
15 PASS: numeric.atan([1,2]) ==> [0.7854,1.107]
16 PASS: numeric.ceil([-2.2,3.3]) ==> [-2,4]
17 PASS: numeric.floor([-2.2,3.3]) ==> [-3,3]
18 PASS: numeric.log([1,2]) ==> [0,0.6931]
19 PASS: numeric.round([-2.2,3.3]) ==> [-2,3]
20 PASS: numeric.sin([1,2]) ==> [0.8415,0.9093]
21 PASS: numeric.sqrt([1,2]) ==> [1,1.414]
22 PASS: numeric.tan([1,2]) ==> [1.557,-2.185]
23 PASS: numeric.dim([1,2]) ==> [2]
24 PASS: numeric.dim([[1,2,3],[4,5,6]]) ==> [2,3]
25 PASS: x = [[1,2,3],[4,5,6]] ==> [[1,2,3],[4,5,6]]
26 PASS: numeric.same([1,2],[1,2]) ==> true
27 PASS: numeric.same([1,2],[1,2,3]) ==> false
28 PASS: numeric.same([1,2],[[1],[2]]) ==> false
29 PASS: numeric.same([[1,2],[3,4]],[[1,2],[3,4]]) ==> true
30 PASS: numeric.same([[1,2],[3,4]],[[1,2],[3,5]]) ==> false
31 PASS: numeric.same([[1,2],[2,4]],[[1,2],[3,4]]) ==> false
32 PASS: sum = numeric.mapreduce('accum += xi','0'); sum([1,2,3]) ==> 6
33 PASS: sum([[1,2,3],[4,5,6]]) ==> 21
34 PASS: numeric.any([false,true]) ==> true
35 PASS: numeric.any([[0,0,3.14],[0,false,0]]) ==> true
36 PASS: numeric.any([0,0,false]) ==> false
37 PASS: numeric.all([false,true]) ==> false
38 PASS: numeric.all([[1,4,3.14],["no",true,-1]]) ==> true
39 PASS: numeric.all([0,0,false]) ==> false
40 PASS: add = numeric.pointwise(['x[i]','y[i]'],'ret[i] = x[i]+y[i];'); add([1,2],[3,4]) ==> [4,6]
41 PASS: numeric.addVV([1,2],[3,4]) ==> [4,6]
42 PASS: numeric.addVS([1,2],3) ==> [4,5]
43 PASS: numeric.add(1,[2,3]) ==> [3,4]
44 PASS: numeric.add([1,2,3],[4,5,6]) ==> [5,7,9]
45 PASS: numeric.sub([1,2],[3,4]) ==> [-2,-2]
46 PASS: numeric.mul([1,2],[3,4]) ==> [3,8]
47 PASS: numeric.div([1,2],[3,4]) ==> [0.3333,0.5]
48 PASS: v = [1,2,3,4]; numeric.addeq(v,3); v ==> [4,5,6,7]
49 PASS: numeric.subeq([1,2,3],[5,3,1]) ==> [-4,-1,2]
50 PASS: numeric.rep([3],5) ==> [5,5,5]
51 PASS: numeric.rep([2,3],0) ==> [[0,0,0],[0,0,0]]
52 PASS: numeric.dotVV([1,2],[3,4]) ==> 11
53 PASS: numeric.dotVM([1,2],[[3,4],[5,6]]) ==> [13,16]
54 PASS: numeric.dotMV([[1,2],[3,4]],[5,6]) ==> [17,39]
55 PASS: numeric.dotMMbig([[1,2],[3,4]],[[5,6],[7,8]]) ==> [[19,22],[43,50]]
56 PASS: numeric.dotMMsmall([[1,2],[3,4]],[[5,6],[7,8]]) ==> [[19,22],[43,50]]
57 PASS: numeric.dot([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]) ==> 285
58 PASS: numeric.dot([1,2,3],[4,5,6]) ==> 32
59 PASS: numeric.dot([[1,2,3],[4,5,6]],[7,8,9]) ==> [50,122]
60 PASS: n = 41; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMsmall(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
61 PASS: n = 42; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMsmall(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
62 PASS: n = 43; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMsmall(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
63 PASS: n = 44; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMbig(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
64 PASS: n = 45; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMbig(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
65 PASS: n = 46; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMbig(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
66 PASS: numeric.diag([1,2,3]) ==> [[1,0,0],[0,2,0],[0,0,3]]
67 PASS: numeric.identity(3) ==> [[1,0,0],[0,1,0],[0,0,1]]
68 PASS: numeric.linspace(1,5); ==> [1,2,3,4,5]
69 PASS: numeric.linspace(1,3,5); ==> [1,1.5,2,2.5,3]
70 PASS: numeric.det([[1,2],[3,4]]); ==> -2
71 PASS: numeric.det([[6,8,4,2,8,5],[3,5,2,4,9,2],[7,6,8,3,4,5],[5,5,2,8,1,6],[3,2,2,4,2,2],[8,3,2,2,4,1]]); ==> -1404
72 PASS: numeric.transpose([[1,2,3],[4,5,6]]) ==> [[1,4],[2,5],[3,6]]
73 PASS: numeric.transpose([[1,2,3,4,5,6,7,8,9,10,11,12]]) ==> [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12]]
74 PASS: numeric.norm2([1,2]) ==> 2.236
75 PASS: numeric.tensor([1,2],[3,4,5]) ==> [[3,4,5],[6,8,10]]
76 PASS: numeric.parseDate(['1/13/2013','2001-5-9, 9:31']); ==> [1.358e12,9.894e11]
77 PASS: numeric.parseFloat(['12','0.1']) ==> [12,0.1]
78 PASS: numeric.parseCSV('a,b,c\n1,2.3,.3\n4e6,-5.3e-8,6.28e+4') ==> [["a","b","c"],[1,2.3,0.3],[4.000e6,-5.3e-8,62800]]
79 PASS: numeric.getURL('tools/helloworld.txt').responseText ==> "Hello,world!"
80 PASS: A = [[1,2,3],[4,5,6],[7,3,5]]; QH = numeric.toUpperHessenberg(A); ==> {H:[[1,-3.597,-0.2481],[-8.062,8.877,0.7846],[-8.882e-16,3.785,1.123]],Q:[[1,0,0],[0,-0.4961,-0.8682],[0,-0.8682,0.4961]]}
81 PASS: numeric.norm2(numeric.sub(QH.H,numeric.dot(QH.Q,numeric.dot(A,numeric.transpose(QH.Q)))))<1e15; ==> true
82 PASS: A = numeric.random([40,40]); QH = numeric.toUpperHessenberg(A); numeric.norm2(numeric.sub(QH.H,numeric.dot(QH.Q,numeric.dot(A,numeric.transpose(QH.Q)))))<1e12; ==> true
83 PASS: A = [[1,2,5],[3,5,0],[7,-3,5]]; QH = numeric.toUpperHessenberg(A); ==> {H:[[1,-5.384,0.1313],[-7.616,3.914,-2.534],[0,0.4655,6.086]],Q:[[1,0,0],[0,-0.3939,-0.9191],[0,-0.9191,0.3939]]}
84 PASS: QB = numeric.QRFrancis(QH.H); ==> {Q:[[0.7268,0.6862,-0.03109],[-0.6755,0.7222,0.1487],[0.1245,-0.08704,0.9884]],B:[[0,1],[2,2]]}
85 PASS: numeric.dot(QB.Q,numeric.dot(QH.H,numeric.transpose(QB.Q))) ==> [[-4.065,1.870,-2.264],[0.02559,8.739,-2.340],[0,-1.110e-16,6.326]]
Chrome testing complete. PASS: 86 FAIL: 0 Total: 86
Fetching http://numericjs.com/staging/documentation.html
In-browser unit tests.
Using Firefox
0 PASS: numeric.seedrandom.seedrandom('1'); Math.random = numeric.seedrandom.random; Math.random(); ==> 0.2694
1 PASS: A = [[1,2,3],[4,5,6]]; ==> [[1,2,3],[4,5,6]]
2 PASS: x = [7,8,9] ==> [7,8,9]
3 PASS: numeric.dot(A,x); ==> [50,122]
4 PASS: y = [10,1,2]; ==> [10,1,2]
5 PASS: numeric['+'](x,y) ==> [17,9,11]
6 PASS: numeric['>'](x,y) ==> [false,true,true]
7 PASS: numeric.add(x,y) ==> [17,9,11]
8 PASS: A = [[1,2,3],[4,5,6],[7,1,9]] ==> [[1,2,3],[4,5,6],[7,1,9]]
9 PASS: Ainv = numeric.inv(A); ==> [[-0.9286,0.3571,0.07143],[-0.1429,0.2857,-0.1429],[0.7381,-0.3095,0.07143]]
10 PASS: numeric.exp([1,2]); ==> [2.718,7.389]
11 PASS: numeric.exp([[1,2],[3,4]]) ==> [[2.718,7.389],[20.09,54.60]]
12 PASS: numeric.abs([-2,3]) ==> [2,3]
13 PASS: numeric.acos([0.1,0.2]) ==> [1.471,1.369]
14 PASS: numeric.asin([0.1,0.2]) ==> [0.1002,0.2014]
15 PASS: numeric.atan([1,2]) ==> [0.7854,1.107]
16 PASS: numeric.ceil([-2.2,3.3]) ==> [-2,4]
17 PASS: numeric.floor([-2.2,3.3]) ==> [-3,3]
18 PASS: numeric.log([1,2]) ==> [0,0.6931]
19 PASS: numeric.round([-2.2,3.3]) ==> [-2,3]
20 PASS: numeric.sin([1,2]) ==> [0.8415,0.9093]
21 PASS: numeric.sqrt([1,2]) ==> [1,1.414]
22 PASS: numeric.tan([1,2]) ==> [1.557,-2.185]
23 PASS: numeric.dim([1,2]) ==> [2]
24 PASS: numeric.dim([[1,2,3],[4,5,6]]) ==> [2,3]
25 PASS: x = [[1,2,3],[4,5,6]] ==> [[1,2,3],[4,5,6]]
26 PASS: numeric.same([1,2],[1,2]) ==> true
27 PASS: numeric.same([1,2],[1,2,3]) ==> false
28 PASS: numeric.same([1,2],[[1],[2]]) ==> false
29 PASS: numeric.same([[1,2],[3,4]],[[1,2],[3,4]]) ==> true
30 PASS: numeric.same([[1,2],[3,4]],[[1,2],[3,5]]) ==> false
31 PASS: numeric.same([[1,2],[2,4]],[[1,2],[3,4]]) ==> false
32 PASS: sum = numeric.mapreduce('accum += xi','0'); sum([1,2,3]) ==> 6
33 PASS: sum([[1,2,3],[4,5,6]]) ==> 21
34 PASS: numeric.any([false,true]) ==> true
35 PASS: numeric.any([[0,0,3.14],[0,false,0]]) ==> true
36 PASS: numeric.any([0,0,false]) ==> false
37 PASS: numeric.all([false,true]) ==> false
38 PASS: numeric.all([[1,4,3.14],["no",true,-1]]) ==> true
39 PASS: numeric.all([0,0,false]) ==> false
40 PASS: add = numeric.pointwise(['x[i]','y[i]'],'ret[i] = x[i]+y[i];'); add([1,2],[3,4]) ==> [4,6]
41 PASS: numeric.addVV([1,2],[3,4]) ==> [4,6]
42 PASS: numeric.addVS([1,2],3) ==> [4,5]
43 PASS: numeric.add(1,[2,3]) ==> [3,4]
44 PASS: numeric.add([1,2,3],[4,5,6]) ==> [5,7,9]
45 PASS: numeric.sub([1,2],[3,4]) ==> [-2,-2]
46 PASS: numeric.mul([1,2],[3,4]) ==> [3,8]
47 PASS: numeric.div([1,2],[3,4]) ==> [0.3333,0.5]
48 PASS: v = [1,2,3,4]; numeric.addeq(v,3); v ==> [4,5,6,7]
49 PASS: numeric.subeq([1,2,3],[5,3,1]) ==> [-4,-1,2]
50 PASS: numeric.rep([3],5) ==> [5,5,5]
51 PASS: numeric.rep([2,3],0) ==> [[0,0,0],[0,0,0]]
52 PASS: numeric.dotVV([1,2],[3,4]) ==> 11
53 PASS: numeric.dotVM([1,2],[[3,4],[5,6]]) ==> [13,16]
54 PASS: numeric.dotMV([[1,2],[3,4]],[5,6]) ==> [17,39]
55 PASS: numeric.dotMMbig([[1,2],[3,4]],[[5,6],[7,8]]) ==> [[19,22],[43,50]]
56 PASS: numeric.dotMMsmall([[1,2],[3,4]],[[5,6],[7,8]]) ==> [[19,22],[43,50]]
57 PASS: numeric.dot([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]) ==> 285
58 PASS: numeric.dot([1,2,3],[4,5,6]) ==> 32
59 PASS: numeric.dot([[1,2,3],[4,5,6]],[7,8,9]) ==> [50,122]
60 PASS: n = 41; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMsmall(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
61 PASS: n = 42; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMsmall(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
62 PASS: n = 43; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMsmall(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
63 PASS: n = 44; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMbig(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
64 PASS: n = 45; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMbig(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
65 PASS: n = 46; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMbig(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
66 PASS: numeric.diag([1,2,3]) ==> [[1,0,0],[0,2,0],[0,0,3]]
67 PASS: numeric.identity(3) ==> [[1,0,0],[0,1,0],[0,0,1]]
68 PASS: numeric.linspace(1,5); ==> [1,2,3,4,5]
69 PASS: numeric.linspace(1,3,5); ==> [1,1.5,2,2.5,3]
70 PASS: numeric.det([[1,2],[3,4]]); ==> -2
71 PASS: numeric.det([[6,8,4,2,8,5],[3,5,2,4,9,2],[7,6,8,3,4,5],[5,5,2,8,1,6],[3,2,2,4,2,2],[8,3,2,2,4,1]]); ==> -1404
72 PASS: numeric.transpose([[1,2,3],[4,5,6]]) ==> [[1,4],[2,5],[3,6]]
73 PASS: numeric.transpose([[1,2,3,4,5,6,7,8,9,10,11,12]]) ==> [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12]]
74 PASS: numeric.norm2([1,2]) ==> 2.236
75 PASS: numeric.tensor([1,2],[3,4,5]) ==> [[3,4,5],[6,8,10]]
76 PASS: numeric.parseDate(['1/13/2013','2001-5-9, 9:31']); ==> [1.358e12,9.894e11]
77 PASS: numeric.parseFloat(['12','0.1']) ==> [12,0.1]
78 PASS: numeric.parseCSV('a,b,c\n1,2.3,.3\n4e6,-5.3e-8,6.28e+4') ==> [["a","b","c"],[1,2.3,0.3],[4.000e6,-5.3e-8,62800]]
79 PASS: numeric.getURL('tools/helloworld.txt').responseText ==> "Hello,world!"
80 PASS: A = [[1,2,3],[4,5,6],[7,3,5]]; QH = numeric.toUpperHessenberg(A); ==> {H:[[1,-3.597,-0.2481],[-8.062,8.877,0.7846],[-8.882e-16,3.785,1.123]],Q:[[1,0,0],[0,-0.4961,-0.8682],[0,-0.8682,0.4961]]}
81 PASS: numeric.norm2(numeric.sub(QH.H,numeric.dot(QH.Q,numeric.dot(A,numeric.transpose(QH.Q)))))<1e15; ==> true
82 PASS: A = numeric.random([40,40]); QH = numeric.toUpperHessenberg(A); numeric.norm2(numeric.sub(QH.H,numeric.dot(QH.Q,numeric.dot(A,numeric.transpose(QH.Q)))))<1e12; ==> true
83 PASS: A = [[1,2,5],[3,5,0],[7,-3,5]]; QH = numeric.toUpperHessenberg(A); ==> {H:[[1,-5.384,0.1313],[-7.616,3.914,-2.534],[0,0.4655,6.086]],Q:[[1,0,0],[0,-0.3939,-0.9191],[0,-0.9191,0.3939]]}
84 PASS: QB = numeric.QRFrancis(QH.H); ==> {Q:[[0.7268,0.6862,-0.03109],[-0.6755,0.7222,0.1487],[0.1245,-0.08704,0.9884]],B:[[0,1],[2,2]]}
85 PASS: numeric.dot(QB.Q,numeric.dot(QH.H,numeric.transpose(QB.Q))) ==> [[-4.065,1.870,-2.264],[0.02559,8.739,-2.340],[0,-1.110e-16,6.326]]
Firefox testing complete. PASS: 86 FAIL: 0 Total: 86
