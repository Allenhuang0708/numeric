Link testing.
Using Firefox
0 PASS: linkhome ==> library for numerical computations in page
1 PASS: linkworkshop ==> IN in page
2 PASS: linkdoc ==> vectors and matrices in page
3 PASS: linklib ==> use strict in page
4 PASS: linklibmin ==> var numeric={};numeric in page
Link testing complete. PASS: 5 FAIL: 0 Total: 5
Fetching http://numericjs.com/staging/documentation.html
In-browser unit tests.
Using Chrome
0 PASS: numeric.seedrandom.seedrandom('1'); Math.random = numeric.seedrandom.random; Math.random(); ==> 0.2694
1 PASS: A = [[1,2,3],[4,5,6]]; ==> [[1,2,3],[4,5,6]]
2 PASS: x = [7,8,9] ==> [7,8,9]
3 PASS: numeric.dot(A,x); ==> [50,122]
4 PASS: y = [10,1,2]; ==> [10,1,2]
5 PASS: numeric['+'](x,y) ==> [17,9,11]
6 PASS: numeric['>'](x,y) ==> [false,true,true]
7 PASS: numeric.add(x,y) ==> [17,9,11]
8 PASS: A = [[1,2,3],[4,5,6],[7,1,9]] ==> [[1,2,3],[4,5,6],[7,1,9]]
9 PASS: Ainv = numeric.inv(A); ==> [[-0.9286,0.3571,0.07143],[-0.1429,0.2857,-0.1429],[0.7381,-0.3095,0.07143]]
10 PASS: numeric.precision = 10; x = 3.141592653589793 ==> 3.141592654
11 PASS: numeric.precision = 4; x ==> 3.142
12 PASS: numeric.identity(100) ==> ...LargeArray...
13 PASS: numeric.largeArray = 2; A = numeric.identity(4) ==> ...LargeArray...
14 PASS: numeric.largeArray = 50; A ==> [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]
15 PASS: numeric.exp([1,2]); ==> [2.718,7.389]
16 PASS: numeric.exp([[1,2],[3,4]]) ==> [[2.718,7.389],[20.09,54.6]]
17 PASS: numeric.abs([-2,3]) ==> [2,3]
18 PASS: numeric.acos([0.1,0.2]) ==> [1.471,1.369]
19 PASS: numeric.asin([0.1,0.2]) ==> [0.1002,0.2014]
20 PASS: numeric.atan([1,2]) ==> [0.7854,1.107]
21 PASS: numeric.atan2([1,2],[3,4]) ==> [0.3218,0.4636]
22 PASS: numeric.ceil([-2.2,3.3]) ==> [-2,4]
23 PASS: numeric.floor([-2.2,3.3]) ==> [-3,3]
24 PASS: numeric.log([1,2]) ==> [0,0.6931]
25 PASS: numeric.round([-2.2,3.3]) ==> [-2,3]
26 PASS: numeric.sin([1,2]) ==> [0.8415,0.9093]
27 PASS: numeric.sqrt([1,2]) ==> [1,1.414]
28 PASS: numeric.tan([1,2]) ==> [1.557,-2.185]
29 PASS: numeric.dim([1,2]) ==> [2]
30 PASS: numeric.dim([[1,2,3],[4,5,6]]) ==> [2,3]
31 PASS: x = [[1,2,3],[4,5,6]] ==> [[1,2,3],[4,5,6]]
32 PASS: numeric.same([1,2],[1,2]) ==> true
33 PASS: numeric.same([1,2],[1,2,3]) ==> false
34 PASS: numeric.same([1,2],[[1],[2]]) ==> false
35 PASS: numeric.same([[1,2],[3,4]],[[1,2],[3,4]]) ==> true
36 PASS: numeric.same([[1,2],[3,4]],[[1,2],[3,5]]) ==> false
37 PASS: numeric.same([[1,2],[2,4]],[[1,2],[3,4]]) ==> false
38 PASS: numeric.rep([3],5) ==> [5,5,5]
39 PASS: numeric.rep([2,3],0) ==> [[0,0,0],[0,0,0]]
40 PASS: sum = numeric.mapreduce('accum += xi','0'); sum([1,2,3]) ==> 6
41 PASS: sum([[1,2,3],[4,5,6]]) ==> 21
42 PASS: numeric.any([false,true]) ==> true
43 PASS: numeric.any([[0,0,3.14],[0,false,0]]) ==> true
44 PASS: numeric.any([0,0,false]) ==> false
45 PASS: numeric.all([false,true]) ==> false
46 PASS: numeric.all([[1,4,3.14],["no",true,-1]]) ==> true
47 PASS: numeric.all([0,0,false]) ==> false
48 PASS: add = numeric.pointwise(['x[i]','y[i]'],'ret[i] = x[i]+y[i];'); add([1,2],[3,4]) ==> [4,6]
49 PASS: numeric.diag([1,2,3]) ==> [[1,0,0],[0,2,0],[0,0,3]]
50 PASS: numeric.identity(3) ==> [[1,0,0],[0,1,0],[0,0,1]]
51 PASS: numeric.linspace(1,5); ==> [1,2,3,4,5]
52 PASS: numeric.linspace(1,3,5); ==> [1,1.5,2,2.5,3]
53 PASS: numeric.addVV([1,2],[3,4]) ==> [4,6]
54 PASS: numeric.addVS([1,2],3) ==> [4,5]
55 PASS: numeric.add(1,[2,3]) ==> [3,4]
56 PASS: numeric.add([1,2,3],[4,5,6]) ==> [5,7,9]
57 PASS: numeric.sub([1,2],[3,4]) ==> [-2,-2]
58 PASS: numeric.mul([1,2],[3,4]) ==> [3,8]
59 PASS: numeric.div([1,2],[3,4]) ==> [0.3333,0.5]
60 PASS: v = [1,2,3,4]; numeric.addeq(v,3); v ==> [4,5,6,7]
61 PASS: numeric.subeq([1,2,3],[5,3,1]) ==> [-4,-1,2]
62 PASS: numeric.neg([1,-2,3]) ==> [-1,2,-3]
63 PASS: numeric.isFinite([10,NaN,Infinity]) ==> [true,false,false]
64 PASS: numeric.isNaN([10,NaN,Infinity]) ==> [false,true,false]
65 PASS: n = 41; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMsmall(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
66 PASS: n = 42; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMsmall(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
67 PASS: n = 43; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMsmall(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
68 PASS: n = 44; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMbig(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
69 PASS: n = 45; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMbig(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
70 PASS: n = 46; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMbig(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
71 PASS: numeric.dotVV([1,2],[3,4]) ==> 11
72 PASS: numeric.dotVM([1,2],[[3,4],[5,6]]) ==> [13,16]
73 PASS: numeric.dotMV([[1,2],[3,4]],[5,6]) ==> [17,39]
74 PASS: numeric.dotMMbig([[1,2],[3,4]],[[5,6],[7,8]]) ==> [[19,22],[43,50]]
75 PASS: numeric.dotMMsmall([[1,2],[3,4]],[[5,6],[7,8]]) ==> [[19,22],[43,50]]
76 PASS: numeric.dot([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]) ==> 285
77 PASS: numeric.dot([1,2,3],[4,5,6]) ==> 32
78 PASS: numeric.dot([[1,2,3],[4,5,6]],[7,8,9]) ==> [50,122]
79 PASS: numeric.det([[1,2],[3,4]]); ==> -2
80 PASS: numeric.det([[6,8,4,2,8,5],[3,5,2,4,9,2],[7,6,8,3,4,5],[5,5,2,8,1,6],[3,2,2,4,2,2],[8,3,2,2,4,1]]); ==> -1404
81 PASS: numeric.inv([[1,2],[3,4]]) ==> [[-2,1],[1.5,-0.5]]
82 PASS: numeric.transpose([[1,2,3],[4,5,6]]) ==> [[1,4],[2,5],[3,6]]
83 PASS: numeric.transpose([[1,2,3,4,5,6,7,8,9,10,11,12]]) ==> [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12]]
84 PASS: numeric.norm2([1,2]) ==> 2.236
85 PASS: numeric.tensor([1,2],[3,4,5]) ==> [[3,4,5],[6,8,10]]
86 PASS: numeric.parseDate(['1/13/2013','2001-5-9, 9:31']); ==> [1.358e12,9.894e11]
87 PASS: numeric.parseFloat(['12','0.1']) ==> [12,0.1]
88 PASS: numeric.parseCSV('a,b,c\n1,2.3,.3\n4e6,-5.3e-8,6.28e+4') ==> [["a","b","c"],[1,2.3,0.3],[4.000e6,-5.3e-8,62800]]
89 PASS: numeric.getURL('tools/helloworld.txt').responseText ==> "Hello,world!"
90 PASS: z = new numeric.T(3,4); ==> {x:3,y:4}
91 PASS: z.add(5) ==> {x:8,y:4}
92 PASS: w = new numeric.T(2,8); ==> {x:2,y:8}
93 PASS: z.add(w) ==> {x:5,y:12}
94 PASS: z.mul(w) ==> {x:-26,y:32}
95 PASS: z.div(w) ==> {x:0.5588,y:-0.2353}
96 PASS: z.sub(w) ==> {x:1,y:-4}
97 PASS: z = new numeric.T([1,2],[3,4]); ==> {x:[1,2],y:[3,4]}
98 PASS: z.abs() ==> {x:[2,2.828],y:}
99 PASS: z.conj() ==> {x:[1,2],y:[-3,-4]}
100 PASS: z.norm2() ==> 5.477
101 PASS: z.exp() ==> {x:[-2.691,-4.83],y:[0.3836,-5.592]}
102 PASS: z.cos() ==> {x:[-1.528,-2.459],y:[0.1658,-2.745]}
103 PASS: z.sin() ==> {x:[0.2178,-2.847],y:[1.163,2.371]}
104 PASS: z.log() ==> {x:[0.6931,1.04],y:[1.249,1.107]}
105 PASS: A = new numeric.T([[1,2],[3,4]],[[0,1],[2,-1]]); ==> {x:[[1,2],[3,4]],y:[[0,1],[2,-1]]}
106 PASS: A.inv(); ==> {x:[[0.125,0.125],[0.25,0]],y:[[0.5,-0.25],[-0.375,0.125]]}
107 PASS: A.inv().dot(A) ==> {x:[[1,0],[0,1]],y:[[0,-2.776e-17],[0,0]]}
108 PASS: A.get([1,1]) ==> {x:4,y:-1}
109 PASS: A.transpose() ==> {x:[[1,3],[2,4]],y:[[0,2],[1,-1]]}
110 PASS: A.transjugate() ==> {x:[[1,3],[2,4]],y:[[0,-2],[-1,1]]}
111 PASS: numeric.T.rep([2,2],new numeric.T(2,3)); ==> {x:[[2,2],[2,2]],y:[[3,3],[3,3]]}
112 PASS: A = [[1,2,5],[3,5,0],[7,-3,5]]; ==> [[1,2,5],[3,5,0],[7,-3,5]]
113 PASS: B = numeric.eig(A); ==> {lambda:{x:[-4.068,8.742,6.326],y:},E:{x:[[0.7281,-0.5634,0.4034],[-0.2409,-0.4516,0.9127],[-0.6417,-0.6918,0.06462]],y:}}
114 PASS: C = B.E.dot(numeric.T.diag(B.lambda)).dot(B.E.inv()); ==> {x:[[1,2,5],[3,5,-1.943e-15],[7,-3,5]],y:}
115 PASS: C.sub(A).norm2()<1e-13 ==> true
116 PASS: n = 31; A = numeric.random([n,n]); B = numeric.eig(A); B.E.dot(numeric.T.diag(B.lambda).dot(B.E.inv())).sub(A).norm2()<1e-12 ==> true
117 PASS: n = 32; A = numeric.random([n,n]); B = numeric.eig(A); B.E.dot(numeric.T.diag(B.lambda)).dot(B.E.inv()).sub(A).norm2()<1e-12 ==> true
118 PASS: n = 33; A = numeric.random([n,n]); B = numeric.eig(A); B.E.dot(numeric.T.diag(B.lambda)).dot(B.E.inv()).sub(A).norm2()<1e-12 ==> true
119 PASS: n = 34; A = numeric.random([n,n]); B = numeric.eig(A); B.E.dot(numeric.T.diag(B.lambda)).dot(B.E.inv()).sub(A).norm2()<1e-12 ==> true
120 PASS: n = 41; A = numeric.random([n,n]); B = numeric.eig(A); B.E.dot(numeric.T.diag(B.lambda)).dot(B.E.inv()).sub(A).norm2()<1e-12 ==> true
121 PASS: n = 42; A = numeric.random([n,n]); B = numeric.eig(A); B.E.dot(numeric.T.diag(B.lambda)).dot(B.E.inv()).sub(A).norm2()<1e-12 ==> true
122 PASS: n = 43; A = numeric.random([n,n]); B = numeric.eig(A); B.E.dot(numeric.T.diag(B.lambda)).dot(B.E.inv()).sub(A).norm2()<1e-12 ==> true
123 PASS: n = 44; A = numeric.random([n,n]); B = numeric.eig(A); B.E.dot(numeric.T.diag(B.lambda)).dot(B.E.inv()).sub(A).norm2()<1e-12 ==> true
124 PASS: sparse.identity(3) ==> [[1],[,1],[,,1]]
125 PASS: sparse.transpose([[1],[2,3],[4,5,6]]) ==> [[1,2,4],[,3,5],[,,6]]
126 PASS: A = [[2,-1],[-1,2,-1],[,-1,2]]; lup = sparse.LUP(A) ==> {L:[[1],[-0.5,1],[,-0.6667,1]],U:[[2,-1],[,1.5,-1],[,,1.333]],P:[0,1,2],Pinv:[0,1,2]}
127 PASS: sparse.dot(lup.L,lup.U) ==> [[2,-1],[-1,2,-1],[,-1,2]]
128 PASS: x = [3,1,7]; b = sparse.dot(A,x); ==> [5,-8,13]
129 PASS: sparse.LUPsolve(lup,b) ==> [3,1,7]
130 PASS: A = sparse.scatter([[0,0,1,1,1,2,2],[0,1,0,1,2,1,2],[1,2,3,4,5,6,7]]) ==> [[1,2],[3,4,5],[,6,7]]
131 PASS: sparse.gather(A) ==> [[0,0,1,1,1,2,2],[0,1,0,1,2,1,2],[1,2,3,4,5,6,7]]
132 PASS: sparse.dot([1,2,3],[,4,5]) ==> 23
133 PASS: sparse.dot([1, ,3],[[4,5,],[,6,7],[1,,8]]) ==> [7,5,24]
134 PASS: sparse.dot([[3,1],[4,5,9],[,3,2]],[7,3]) ==> [24,43,9]
Chrome testing complete. PASS: 135 FAIL: 0 Total: 135
Fetching http://numericjs.com/staging/documentation.html
In-browser unit tests.
Using Firefox
0 PASS: numeric.seedrandom.seedrandom('1'); Math.random = numeric.seedrandom.random; Math.random(); ==> 0.2694
1 PASS: A = [[1,2,3],[4,5,6]]; ==> [[1,2,3],[4,5,6]]
2 PASS: x = [7,8,9] ==> [7,8,9]
3 PASS: numeric.dot(A,x); ==> [50,122]
4 PASS: y = [10,1,2]; ==> [10,1,2]
5 PASS: numeric['+'](x,y) ==> [17,9,11]
6 PASS: numeric['>'](x,y) ==> [false,true,true]
7 PASS: numeric.add(x,y) ==> [17,9,11]
8 PASS: A = [[1,2,3],[4,5,6],[7,1,9]] ==> [[1,2,3],[4,5,6],[7,1,9]]
9 PASS: Ainv = numeric.inv(A); ==> [[-0.9286,0.3571,0.07143],[-0.1429,0.2857,-0.1429],[0.7381,-0.3095,0.07143]]
10 PASS: numeric.precision = 10; x = 3.141592653589793 ==> 3.141592654
11 PASS: numeric.precision = 4; x ==> 3.142
12 PASS: numeric.identity(100) ==> ...LargeArray...
13 PASS: numeric.largeArray = 2; A = numeric.identity(4) ==> ...LargeArray...
14 PASS: numeric.largeArray = 50; A ==> [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]
15 PASS: numeric.exp([1,2]); ==> [2.718,7.389]
16 PASS: numeric.exp([[1,2],[3,4]]) ==> [[2.718,7.389],[20.09,54.6]]
17 PASS: numeric.abs([-2,3]) ==> [2,3]
18 PASS: numeric.acos([0.1,0.2]) ==> [1.471,1.369]
19 PASS: numeric.asin([0.1,0.2]) ==> [0.1002,0.2014]
20 PASS: numeric.atan([1,2]) ==> [0.7854,1.107]
21 PASS: numeric.atan2([1,2],[3,4]) ==> [0.3218,0.4636]
22 PASS: numeric.ceil([-2.2,3.3]) ==> [-2,4]
23 PASS: numeric.floor([-2.2,3.3]) ==> [-3,3]
24 PASS: numeric.log([1,2]) ==> [0,0.6931]
25 PASS: numeric.round([-2.2,3.3]) ==> [-2,3]
26 PASS: numeric.sin([1,2]) ==> [0.8415,0.9093]
27 PASS: numeric.sqrt([1,2]) ==> [1,1.414]
28 PASS: numeric.tan([1,2]) ==> [1.557,-2.185]
29 PASS: numeric.dim([1,2]) ==> [2]
30 PASS: numeric.dim([[1,2,3],[4,5,6]]) ==> [2,3]
31 PASS: x = [[1,2,3],[4,5,6]] ==> [[1,2,3],[4,5,6]]
32 PASS: numeric.same([1,2],[1,2]) ==> true
33 PASS: numeric.same([1,2],[1,2,3]) ==> false
34 PASS: numeric.same([1,2],[[1],[2]]) ==> false
35 PASS: numeric.same([[1,2],[3,4]],[[1,2],[3,4]]) ==> true
36 PASS: numeric.same([[1,2],[3,4]],[[1,2],[3,5]]) ==> false
37 PASS: numeric.same([[1,2],[2,4]],[[1,2],[3,4]]) ==> false
38 PASS: numeric.rep([3],5) ==> [5,5,5]
39 PASS: numeric.rep([2,3],0) ==> [[0,0,0],[0,0,0]]
40 PASS: sum = numeric.mapreduce('accum += xi','0'); sum([1,2,3]) ==> 6
41 PASS: sum([[1,2,3],[4,5,6]]) ==> 21
42 PASS: numeric.any([false,true]) ==> true
43 PASS: numeric.any([[0,0,3.14],[0,false,0]]) ==> true
44 PASS: numeric.any([0,0,false]) ==> false
45 PASS: numeric.all([false,true]) ==> false
46 PASS: numeric.all([[1,4,3.14],["no",true,-1]]) ==> true
47 PASS: numeric.all([0,0,false]) ==> false
48 PASS: add = numeric.pointwise(['x[i]','y[i]'],'ret[i] = x[i]+y[i];'); add([1,2],[3,4]) ==> [4,6]
49 PASS: numeric.diag([1,2,3]) ==> [[1,0,0],[0,2,0],[0,0,3]]
50 PASS: numeric.identity(3) ==> [[1,0,0],[0,1,0],[0,0,1]]
51 PASS: numeric.linspace(1,5); ==> [1,2,3,4,5]
52 PASS: numeric.linspace(1,3,5); ==> [1,1.5,2,2.5,3]
53 PASS: numeric.addVV([1,2],[3,4]) ==> [4,6]
54 PASS: numeric.addVS([1,2],3) ==> [4,5]
55 PASS: numeric.add(1,[2,3]) ==> [3,4]
56 PASS: numeric.add([1,2,3],[4,5,6]) ==> [5,7,9]
57 PASS: numeric.sub([1,2],[3,4]) ==> [-2,-2]
58 PASS: numeric.mul([1,2],[3,4]) ==> [3,8]
59 PASS: numeric.div([1,2],[3,4]) ==> [0.3333,0.5]
60 PASS: v = [1,2,3,4]; numeric.addeq(v,3); v ==> [4,5,6,7]
61 PASS: numeric.subeq([1,2,3],[5,3,1]) ==> [-4,-1,2]
62 PASS: numeric.neg([1,-2,3]) ==> [-1,2,-3]
63 PASS: numeric.isFinite([10,NaN,Infinity]) ==> [true,false,false]
64 PASS: numeric.isNaN([10,NaN,Infinity]) ==> [false,true,false]
65 PASS: n = 41; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMsmall(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
66 PASS: n = 42; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMsmall(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
67 PASS: n = 43; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMsmall(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
68 PASS: n = 44; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMbig(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
69 PASS: n = 45; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMbig(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
70 PASS: n = 46; A = numeric.random([n,n]); numeric.norm2(numeric.sub(numeric.dotMMbig(numeric.inv(A),A),numeric.identity(n)))<1e-12 ==> true
71 PASS: numeric.dotVV([1,2],[3,4]) ==> 11
72 PASS: numeric.dotVM([1,2],[[3,4],[5,6]]) ==> [13,16]
73 PASS: numeric.dotMV([[1,2],[3,4]],[5,6]) ==> [17,39]
74 PASS: numeric.dotMMbig([[1,2],[3,4]],[[5,6],[7,8]]) ==> [[19,22],[43,50]]
75 PASS: numeric.dotMMsmall([[1,2],[3,4]],[[5,6],[7,8]]) ==> [[19,22],[43,50]]
76 PASS: numeric.dot([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]) ==> 285
77 PASS: numeric.dot([1,2,3],[4,5,6]) ==> 32
78 PASS: numeric.dot([[1,2,3],[4,5,6]],[7,8,9]) ==> [50,122]
79 PASS: numeric.det([[1,2],[3,4]]); ==> -2
80 PASS: numeric.det([[6,8,4,2,8,5],[3,5,2,4,9,2],[7,6,8,3,4,5],[5,5,2,8,1,6],[3,2,2,4,2,2],[8,3,2,2,4,1]]); ==> -1404
81 PASS: numeric.inv([[1,2],[3,4]]) ==> [[-2,1],[1.5,-0.5]]
82 PASS: numeric.transpose([[1,2,3],[4,5,6]]) ==> [[1,4],[2,5],[3,6]]
83 PASS: numeric.transpose([[1,2,3,4,5,6,7,8,9,10,11,12]]) ==> [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12]]
84 PASS: numeric.norm2([1,2]) ==> 2.236
85 PASS: numeric.tensor([1,2],[3,4,5]) ==> [[3,4,5],[6,8,10]]
86 PASS: numeric.parseDate(['1/13/2013','2001-5-9, 9:31']); ==> [1.358e12,9.894e11]
87 PASS: numeric.parseFloat(['12','0.1']) ==> [12,0.1]
88 PASS: numeric.parseCSV('a,b,c\n1,2.3,.3\n4e6,-5.3e-8,6.28e+4') ==> [["a","b","c"],[1,2.3,0.3],[4.000e6,-5.3e-8,62800]]
89 PASS: numeric.getURL('tools/helloworld.txt').responseText ==> "Hello,world!"
90 PASS: z = new numeric.T(3,4); ==> {x:3,y:4}
91 PASS: z.add(5) ==> {x:8,y:4}
92 PASS: w = new numeric.T(2,8); ==> {x:2,y:8}
93 PASS: z.add(w) ==> {x:5,y:12}
94 PASS: z.mul(w) ==> {x:-26,y:32}
95 PASS: z.div(w) ==> {x:0.5588,y:-0.2353}
96 PASS: z.sub(w) ==> {x:1,y:-4}
97 PASS: z = new numeric.T([1,2],[3,4]); ==> {x:[1,2],y:[3,4]}
98 PASS: z.abs() ==> {x:[2,2.828],y:}
99 PASS: z.conj() ==> {x:[1,2],y:[-3,-4]}
100 PASS: z.norm2() ==> 5.477
101 PASS: z.exp() ==> {x:[-2.691,-4.83],y:[0.3836,-5.592]}
102 PASS: z.cos() ==> {x:[-1.528,-2.459],y:[0.1658,-2.745]}
103 PASS: z.sin() ==> {x:[0.2178,-2.847],y:[1.163,2.371]}
104 PASS: z.log() ==> {x:[0.6931,1.04],y:[1.249,1.107]}
105 PASS: A = new numeric.T([[1,2],[3,4]],[[0,1],[2,-1]]); ==> {x:[[1,2],[3,4]],y:[[0,1],[2,-1]]}
106 PASS: A.inv(); ==> {x:[[0.125,0.125],[0.25,0]],y:[[0.5,-0.25],[-0.375,0.125]]}
107 PASS: A.inv().dot(A) ==> {x:[[1,0],[0,1]],y:[[0,-2.776e-17],[0,0]]}
108 PASS: A.get([1,1]) ==> {x:4,y:-1}
109 PASS: A.transpose() ==> {x:[[1,3],[2,4]],y:[[0,2],[1,-1]]}
110 PASS: A.transjugate() ==> {x:[[1,3],[2,4]],y:[[0,-2],[-1,1]]}
111 PASS: numeric.T.rep([2,2],new numeric.T(2,3)); ==> {x:[[2,2],[2,2]],y:[[3,3],[3,3]]}
112 PASS: A = [[1,2,5],[3,5,0],[7,-3,5]]; ==> [[1,2,5],[3,5,0],[7,-3,5]]
113 PASS: B = numeric.eig(A); ==> {lambda:{x:[-4.068,8.742,6.326],y:},E:{x:[[0.7281,-0.5634,0.4034],[-0.2409,-0.4516,0.9127],[-0.6417,-0.6918,0.06462]],y:}}
114 PASS: C = B.E.dot(numeric.T.diag(B.lambda)).dot(B.E.inv()); ==> {x:[[1,2,5],[3,5,-1.943e-15],[7,-3,5]],y:}
115 PASS: C.sub(A).norm2()<1e-13 ==> true
116 PASS: n = 31; A = numeric.random([n,n]); B = numeric.eig(A); B.E.dot(numeric.T.diag(B.lambda).dot(B.E.inv())).sub(A).norm2()<1e-12 ==> true
117 PASS: n = 32; A = numeric.random([n,n]); B = numeric.eig(A); B.E.dot(numeric.T.diag(B.lambda)).dot(B.E.inv()).sub(A).norm2()<1e-12 ==> true
118 PASS: n = 33; A = numeric.random([n,n]); B = numeric.eig(A); B.E.dot(numeric.T.diag(B.lambda)).dot(B.E.inv()).sub(A).norm2()<1e-12 ==> true
119 PASS: n = 34; A = numeric.random([n,n]); B = numeric.eig(A); B.E.dot(numeric.T.diag(B.lambda)).dot(B.E.inv()).sub(A).norm2()<1e-12 ==> true
120 PASS: n = 41; A = numeric.random([n,n]); B = numeric.eig(A); B.E.dot(numeric.T.diag(B.lambda)).dot(B.E.inv()).sub(A).norm2()<1e-12 ==> true
121 PASS: n = 42; A = numeric.random([n,n]); B = numeric.eig(A); B.E.dot(numeric.T.diag(B.lambda)).dot(B.E.inv()).sub(A).norm2()<1e-12 ==> true
122 PASS: n = 43; A = numeric.random([n,n]); B = numeric.eig(A); B.E.dot(numeric.T.diag(B.lambda)).dot(B.E.inv()).sub(A).norm2()<1e-12 ==> true
123 PASS: n = 44; A = numeric.random([n,n]); B = numeric.eig(A); B.E.dot(numeric.T.diag(B.lambda)).dot(B.E.inv()).sub(A).norm2()<1e-12 ==> true
124 PASS: sparse.identity(3) ==> [[1],[,1],[,,1]]
125 PASS: sparse.transpose([[1],[2,3],[4,5,6]]) ==> [[1,2,4],[,3,5],[,,6]]
126 PASS: A = [[2,-1],[-1,2,-1],[,-1,2]]; lup = sparse.LUP(A) ==> {L:[[1],[-0.5,1],[,-0.6667,1]],U:[[2,-1],[,1.5,-1],[,,1.333]],P:[0,1,2],Pinv:[0,1,2]}
127 PASS: sparse.dot(lup.L,lup.U) ==> [[2,-1],[-1,2,-1],[,-1,2]]
128 PASS: x = [3,1,7]; b = sparse.dot(A,x); ==> [5,-8,13]
129 PASS: sparse.LUPsolve(lup,b) ==> [3,1,7]
130 PASS: A = sparse.scatter([[0,0,1,1,1,2,2],[0,1,0,1,2,1,2],[1,2,3,4,5,6,7]]) ==> [[1,2],[3,4,5],[,6,7]]
131 PASS: sparse.gather(A) ==> [[0,0,1,1,1,2,2],[0,1,0,1,2,1,2],[1,2,3,4,5,6,7]]
132 PASS: sparse.dot([1,2,3],[,4,5]) ==> 23
133 PASS: sparse.dot([1, ,3],[[4,5,],[,6,7],[1,,8]]) ==> [7,5,24]
134 PASS: sparse.dot([[3,1],[4,5,9],[,3,2]],[7,3]) ==> [24,43,9]
Firefox testing complete. PASS: 135 FAIL: 0 Total: 135
