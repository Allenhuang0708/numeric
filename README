Numeric Javascript by Sébastien Loisel
======================================

Numeric Javascript is a javascript library for doing numerical
analysis in the browser. Because Numeric Javascript uses only the
javascript programming language, it works in many browsers and does
not require powerful servers.

Numeric Javascript is for building "web 2.0" apps that can perform
complex calculations in the browser and thus avoid the latency of
asking a server to compute something. Indeed, you do not need a
powerful server (or any server at all) since your web app will perform
all its calculations in the client.

For further information, see http://www.numericjs.com/

License
-------

Numeric Javascript is copyright by Sébastien Loisel and is distributed
under the MIT license. Details are found in the license.txt file.

Dependencies
------------

The library numeric.js itself is standalone, you do not need to
install anything to use it.

Hosting your own Javascript Workshop
====================================

You can host your own server that runs Javascript Workshop.  You will
need to set up MySQL, Apache and PHP and run either Linux or MacOS.

Setting up a Javascript Workshop server
---------------------------------------

To set up a server that runs the Javascript Workshop, proceed as
follows:

1. Set up Apache, MySQL and PHP. I use MacOS but Linux works too.  In
the rest of this, I denote the webroot by $webroot. For example, your
webroot might be $webroot=~/public_html

2. Get the git tree into $webroot/numeric

3. Decompress $webroot/numeric/tools/scripts.tar.gz and move it to
$webroot/scripts

4. Run $webroot/numeric/tools/deploy.sh at the command-line.

Then, every time you make some changes to anything, run the deploy.sh
command again.

Deploying to a live server
--------------------------

There is support for deploying to a live server. To deploy to a live
server, modify step 2 as follows.

2'. Put your git tree in $webroot/somename/, where somename is a name
you choose.

When you run deploy.sh, it will create the symlink $webroot/numeric/
and make it point to $webroot/somename/.  When you later want to
deploy a newer version, get the new git tree to $webroot/newversion/,
where newversion is a name you choose. Then run the new deploy.sh
script. It should delete the old symlink and make a new one. You
should then be able to delete the old tree.

Hacking numeric.js
==================

You can easily make small local modifications to numeric.js.  However,
to make bigger changes, to use the regression testing suite, to run
the Selenium tests, etc..., you will need a more complete development
environment.

Build dependencies
------------------

You will need standard Linux/MacOS tools such as python, php, bash,
etc... You also need to set up your machine to run Apache, MySQL and
PHP as above and make sure that it runs Javascript Workshop as
above. Furthermore, you will need to install the Selenium python
bindings. For me, it was sufficient to do sudo easy_install selenium
There is also some java stuff in the numeric/tools subdirectory
(e.g. jsdoc-toolkit). I also have an eclipse project that
automatically rebuilds the library every time I modify it and also
automatically runs the regression suite. (I actually use Aptana
Studio.) You will also need node.js

Building
--------

I usually edit the files in the numeric/src directory. To produce the
library from those files, run the numeric/tools/build.sh script (or
cat the files together yourself but don't forget the numeric_header.js
and numeric_footer.js in the tools subdirectory). In addition to
performing this concatenation, the build.sh also runs a regression
testing suite and also builds the documentation usign jsdoc-toolkit.

Other scripts
-------------

The numeric/tools subdirectory contains the following custom tools:

* numeric/tools/build.sh: 
Concatenates files and produces /lib/numeric.js, runs the unit tests
by running numeric/tools/unit2.js in node.js, builds the documentation
by calling numeric/tools/mkdoc.sh. I set it up so that it is
automatically called by eclipse every time I modify a file. The
build.sh also does a "quick deploy" by invoking deploy.sh --nodemo.
This quick deploy occurs very quickly, before even the regression tests
begin so you don't need to wait for the entire build process to complete.
This is useful if you're quickly alt-tabbing between Eclipse and
the browser to test modifications.

Note that Eclipse has no qualms about calling build.sh while another
instance is still running. As a result, build.sh makes a small attempt
at killing a previous instance. If you trigger build.sh very rapidly 
(milliseconds) it is conceivable that this mechanism would fail to
catch it and then you would get multiple build.sh running at the same
time, which is not really a big deal.

Note: build.sh expects to be called with its current directory set
to numeric/tools.

* numeric/tools/unit2.js:
It gets all the @example comments from /lib/numeric.js (also stuff in
<pre>). Each line that begins with "> " is a test and the next line(s)
is the expected output.  Then unit2.js executes each line and checks
the output, neglecting whitespace.

* numeric/tools/mkdoc.sh:
Calls jsdoc-toolkit.

* numeric/tools/mkdb.php:
Stores numeric/lib/numeric.js into the database so that it can be used
in workshop. Then, it produces numeric/index.php from
numeric/tools/index_in.php by making sure that the correct version of
numeric.js is used. The file workshop.html also gets included.

* numeric/tools/selenium_tests.py:
Runs all the unit tests in one or more browsers using Selenium.
